
--include "Framework.csp"

include "FrameworkProcess.csp"

include "AppChan.csp"

--*********************************************************************
--**************************************APLICATION*********************

-- SAFELET: MY APP

MyApp  =
	(
	 	Methods_s
	)
 /\	(end_safelet_app -> SKIP)

InitializeApplication_s =
     initializeApplicationCall ->
     initializeApplicationRet ->
     SKIP

GetSequencer_s =
	getSequencerCall ->
	getSequencerRet!TopLevelSequencerId ->
	SKIP

Methods_s =
 (
	GetSequencer_s
	[]
	InitializeApplication_s
 ); Methods_s


--TOP LEVEL SEQUENCER: MY SEQUENCER

channel get_sequencer_done : SchedulableID.Bool
channel set_sequencer_done : SchedulableID.Bool

nametype MissionSequencerAppStateSync = {| get_sequencer_done, set_sequencer_done |}

MainSequencerApp =
(
  Methods_tlms
    [|MissionSequencerAppStateSync|]
  DoneController_tlms(False)
)\ MissionSequencerAppStateSync
/\ (end_sequencer_app.TopLevelSequencerId -> SKIP)


DoneController_tlms(doneVar) =
(
	get_sequencer_done.TopLevelSequencerId!doneVar ->
	DoneController_tlms(doneVar)
)
[]
(
	set_sequencer_done.TopLevelSequencerId?newDone ->
	DoneController_tlms(newDone)
)


GetNextMission_tlms =
    getNextMissionCall.TopLevelSequencerId ->
	get_sequencer_done.TopLevelSequencerId?doneVar ->
	(
	  if doneVar == False then
	  (
		set_sequencer_done.TopLevelSequencerId!True ->
		getNextMissionRet.TopLevelSequencerId!Tier0MissionId  ->
		SKIP
      )
	  else
	  (
			getNextMissionRet.TopLevelSequencerId!nullMissionId ->
		    SKIP
	  )
    )

Methods_tlms =
 (
	GetNextMission_tlms
 ) ; Methods_tlms






--TOP LEVEL MISSION: TOP MISSION 1


MainMissionApp =
(
	(
--		(Methods_tlm1 )
	--	/\
		(end_mission_app.Tier0MissionId -> SKIP )
	)
)

APPInitializePhase(mission) =
--InitializePhase_tlm1 =
if mission == Tier0MissionId then
(  initializeCall.Tier0MissionId   ->
  register!Tier0SequencerId!Tier0MissionId  ->
  initializeRet.Tier0MissionId  ->
 --SKIP
 MissionPhase(mission, {Tier0SequencerId})
)
else if mission == Tier1MissionAId then
(
initializeCall.Tier1MissionAId  ->
register!Tier1ManagedThreadAId!Tier1MissionAId ->
initializeRet.Tier1MissionAId ->
 MissionPhase(mission, {Tier1ManagedThreadAId})
)
else
(
initializeCall.Tier1MissionBId  ->
register!Tier1ManagedThreadBId!Tier1MissionBId ->
initializeRet.Tier1MissionBId ->
 MissionPhase(mission, {Tier1ManagedThreadBId})
)


APPCleanupMission(mission) =
--CleanupPhase_tlm1 =
if mission == Tier0MissionId then
(cleanupMissionCall.Tier0MissionId  ->
 cleanupMissionRet.Tier0MissionId?false ->
 SKIP)
else if mission == Tier1MissionAId then
(cleanupMissionCall.Tier1MissionAId ->
cleanupMissionRet.Tier1MissionAId!True ->
 SKIP)
else
(
cleanupMissionCall.Tier1MissionBId ->
cleanupMissionRet.Tier1MissionBId!True ->
SKIP
)










--NESTED MISSION SEQUENCER

channel get_sequencer_releases : SchedulableID.num
channel set_sequencer_releases : SchedulableID.num



nametype Tier0MissionSequencerSync =
	{|get_sequencer_releases,
	  set_sequencer_releases |}

Tier0MissionSequencerApp =
(
  Methods_t0ms
    [|Tier0MissionSequencerSync|]
  ReleasesController_t0ms(0)
) \Tier0MissionSequencerSync
/\ (end_sequencer_app.Tier0SequencerId -> SKIP)


ReleasesController_t0ms(releases ) =
(
	get_sequencer_releases.Tier0SequencerId!releases ->
	ReleasesController_t0ms(releases)
)
[]
(
	set_sequencer_releases.Tier0SequencerId?newReleases ->
	ReleasesController_t0ms(newReleases )
)


GetNextMission_t0ms =
    getNextMissionCall.Tier0SequencerId ->
	  get_sequencer_releases.Tier0SequencerId?releases ->
	if releases == 0 then
    (
		set_sequencer_releases.Tier0SequencerId!1 ->
		getNextMissionRet.Tier0SequencerId!Tier1MissionAId ->
		SKIP
	)
    else if releases == 1 then
	  (
			set_sequencer_releases.Tier0SequencerId!2 ->
			getNextMissionRet.Tier0SequencerId!Tier1MissionBId ->
			SKIP
		)
	  else
		(
			getNextMissionRet.Tier0SequencerId!nullMissionId ->
			SKIP
		)


Methods_t0ms =
(
	GetNextMission_t0ms
) ; Methods_t0ms





-- Tier 1 Mission A


Tier1MissionAApp =
(
	(
	--	Methods_t1ma
	--	/\
		(end_mission_app.Tier1MissionAId -> SKIP )
	)
)



-- Tier 1 Mission B


Tier1MissionBApp =
(
	(
	--	Methods_t1mb
	--	/\
		(end_mission_app.Tier1MissionBId -> SKIP )
	)
)







--Tier1ManagedThreadAApp



Tier1ManagedThreadAApp =
(
	Methods_t1mta
)
/\ (end_managedThread_app.Tier1ManagedThreadAId -> SKIP)

Methods_t1mta =
	Run_t1mta

Run_t1mta =
	runCall.Tier1ManagedThreadAId ->

	runRet.Tier1ManagedThreadAId ->
	SKIP

--Tier1ManagedThreadBApp



Tier1ManagedThreadBApp =
(
	Methods_t1mtb
)
/\ (end_managedThread_app.Tier1ManagedThreadBId -> SKIP)

Methods_t1mtb =
	Run_t1mtb

Run_t1mtb =
	runCall.Tier1ManagedThreadBId ->

	runRet.Tier1ManagedThreadBId ->
	SKIP


nametype TopLevelMissionSequencerProgramSync = {|done_safeletFW, start_mission, done_mission, done_toplevel_sequencer|}

MultipleNestedMissions =
(
	MyApp
	|||
	MainSequencerApp
	|||
	MainMissionApp
	|||
	Tier0MissionSequencerApp
	|||
	Tier1MissionAApp
	|||
	Tier1MissionBApp
	|||
	Tier1ManagedThreadAApp
	|||
	Tier1ManagedThreadBApp
)





Program2 =
(
      (
          (
            (
              sbdia(SafeletFW [| SafeltAppSync |] MyApp)
                  [|SafeletTierSync|]
                sbdia(TopLevelMissionSequencers({TopLevelSequencerId}) [|MissionSequencerAppSync|] MainSequencerApp)
              )
                [|TierSync|]
              (
                sbdia( MissionFW(Tier0MissionId) [| MissionAppSync |] MainMissionApp)
                  [|MissionSync|]
                sbdia( SchedulableMissionSequencerFW(Tier0SequencerId) [| MissionSequencerAppSync |] Tier0MissionSequencerApp )
              )
            )
              [|Tier1Sync|]
            (
              (
                sbdia( MissionFW(Tier1MissionAId) [| MissionAppSync |] Tier1MissionAApp)
                  [|MissionSync|]
                sbdia( ManagedThreadFW(Tier1ManagedThreadAId) [| MTAppSync |] Tier1ManagedThreadAApp )
              )
                [|{| done_safeletFW, done_toplevel_sequencer |}|]
              (
                sbdia( MissionFW(Tier1MissionBId) [| MissionAppSync |] Tier1MissionBApp)
                  [|MissionSync|]
                sbdia( ManagedThreadFW(Tier1ManagedThreadBId) [| MTAppSync |] Tier1ManagedThreadBApp )
              )
            )
          )
          [| GSRSync |]
GlobalSchedulableRegulator
)

assert Program2 ; Loop :[ deadlock free [FD] ]
