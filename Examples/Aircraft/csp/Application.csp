
--include "Framework.csp"

include "FrameworkProcess.csp"

 APPInitializePhase(mission) =
 	if mission == MainMissionId then
 		InitializePhase_mm
 	else if mission == TakeOffModeId then
 		InitializePhase_tom
 	else if mission == CruiseModeId then
 		InitializePhase_cm
 	else if mission == LandModeId then
 		InitializePhase_lam
 	else
 		SKIP

APPCleanupMission(mission) =
	if mission == MainMissionId then
		CleanupPhase_mm
	else if mission == TakeOffModeId then
 		CleanupPhase_tom
 	else if mission == CruiseModeId then
 		CleanupPhase_cm
 	else if mission == LandModeId then
 		CleanupPhase_lam
 	else
 		SKIP

--****************************************************************************************
--************************************************APLICATION******************************
--****************************************************************************************

-- SAFELET: MY APP


ACSafelet  =
(
  Methods_s
)
/\(end_safelet_app -> SKIP)

InitializeApplication_s =
  initializeApplicationCall ->
  initializeApplicationRet ->
  SKIP

GetSequencer_s =
  getSequencerCall ->
	getSequencerRet!MainMissionSequencerId ->
	SKIP

Methods_s =
(
  GetSequencer_s
	[]
	InitializeApplication_s
); Methods_s


--MainMissionSequencer

channel get_returnedMission : SchedulableID.Bool
channel set_returnedMission : SchedulableID.Bool

nametype MissionSequencerAppStateSync = {| get_returnedMission, set_returnedMission |}

MainMissionSequencerApp =
(
  Methods_mms
    [|MissionSequencerAppStateSync|]
  DoneController_mms (False)
)\ MissionSequencerAppStateSync
/\ (end_sequencer_app.MainMissionSequencerId -> SKIP)

DoneController_mms (done) =
(
	get_returnedMission.MainMissionSequencerId!done ->
	DoneController_mms (done)
)
[]
(
	set_returnedMission.MainMissionSequencerId?newDone ->
	DoneController_mms (newDone)
)

GetNextMission_mms  =
  getNextMissionCall.MainMissionSequencerId ->
	get_returnedMission.MainMissionSequencerId?done ->
  (
    if done == False then
	  (
		  set_returnedMission.MainMissionSequencerId!True ->
		  getNextMissionRet.MainMissionSequencerId!MainMissionId  ->
		  SKIP
    )
	  else
	  (
		  getNextMissionRet.MainMissionSequencerId!nullMissionId ->
		  SKIP
	  )
  )

Methods_mms  =
(
  GetNextMission_mms
) ; Methods_mms



--TOP LEVEL MISSION: TOP MISSION 1


MissionAppMethSync = {| getCabinPressureCall, getCabinPressureRet, setCabinPressure, getFuelRemainingCall, getFuelRemainingRet,
						setFuelRemaining, getAltitudeCall, getAltitudeRet, setAltitude, getAirSpeedCall, getAirSpeedRet, setAirSpeed,
						getEmergencyOxygenCall, getEmergencyOxygenRet, setEmergencyOxygen, getHeadingCall, getHeadingRet, setHeading  |}

channel getCabinPressureCall : MissionID
channel getCabinPressureRet : MissionID.num
channel setCabinPressure : MissionID.num

channel getEmergencyOxygenCall : MissionID
channel getEmergencyOxygenRet : MissionID.num
channel setEmergencyOxygen : MissionID.num

channel getFuelRemainingCall : MissionID
channel getFuelRemainingRet : MissionID.num
channel setFuelRemaining : MissionID.num

channel getAltitudeCall : SchedulableID.MissionID
channel getAltitudeRet : SchedulableID.MissionID.num
channel setAltitude : SchedulableID.MissionID.num

channel getAirSpeedCall : MissionID
channel getAirSpeedRet : MissionID.num
channel setAirSpeed : MissionID.num

channel getHeadingCall : MissionID
channel getHeadingRet : MissionID.num
channel setHeading : MissionID.num

-- State Channels
channel get_cabinPressure : MissionIDs.num
channel set_cabinPressure : MissionIDs.num

channel get_emergencyOxygen : MissionIDs.num
channel set_emergencyOxygen : MissionIDs.num

channel get_fuelRemaining : MissionIDs.num
channel set_fuelRemaining : MissionIDs.num

channel get_altitude : MissionIDs.num
channel set_altitude : MissionIDs.num

channel get_airSpeed : MissionIDs.num
channel set_airSpeed : MissionIDs.num

channel get_heading : MissionIDs.num
channel set_heading : MissionIDs.num

nametype MainMissionStateSync =
	{|	get_cabinPressure, set_cabinPressure, get_emergencyOxygen, set_emergencyOxygen, get_fuelRemaining, set_fuelRemaining,
		get_altitude, set_altitude, get_airSpeed, set_airSpeed, get_heading, set_heading |}

MainMissionApp =
{-(
	Methods_mm
	[| MainMissionStateSync |]
	MainMissionState(0, 0, 0, 0, 0, 0)
) \MainMissionStateSync
/\ -}
(end_mission_app.MainMissionId -> SKIP )

--assert MainMissionState(0, 0, 0, 0, 0, 0) ; Loop :[ deadlock free [FD] ]
--assert MainMissionApp ; Loop :[ deadlock free [FD] ]
{-	CabinState(cabinPressure)
	|||
  OxyState(emergencyOxygen)
	|||
	FuelState(fuelRemaining)
	|||
  AltitudeState(altitude)
  |||
  AirSpeedState(airSpeed)
  |||
  HeadingState(heading)-}

MainMissionState(cabinPressure, emergencyOxygen, fuelRemaining, altitude, airSpeed, heading) =
(

CabinState2
|||
OxyState2
|||
FuelState2
|||
AltitudeState2
|||
AirSpeedState2
|||
HeadingState2

)

{-
CabinState(cabinPressure) =
(
  get_cabinPressure.MainMissionId!cabinPressure ->
  CabinState(cabinPressure)
)
[]
(
  set_cabinPressure.MainMissionId?newCabinPressure ->
  CabinState(newCabinPressure)
)

OxyState(emergencyOxygen) =
(
		get_emergencyOxygen.MainMissionId!emergencyOxygen ->
		OxyState(emergencyOxygen)
)
[]
(
		set_emergencyOxygen.MainMissionId?newEmergencyOxygen ->
		OxyState(newEmergencyOxygen)
)

FuelState(fuelRemaining) =
(
  get_fuelRemaining.MainMissionId!fuelRemaining ->
  FuelState(fuelRemaining)
)
[]
(
  set_fuelRemaining.MainMissionId?newFuelRemaining ->
  FuelState(newFuelRemaining)
)

AltitudeState(altitude) =
(
  get_altitude.MainMissionId!altitude ->
  AltitudeState(altitude)
)
[]
(
  set_altitude.MainMissionId?newAltitude ->
  AltitudeState(newAltitude)
)

AirSpeedState(airSpeed) =
(
  get_airSpeed.MainMissionId!airSpeed ->
  AirSpeedState(airSpeed)
)
[]
(
  set_airSpeed.MainMissionId?newAirSpeed->
  AirSpeedState(newAirSpeed)
)

HeadingState(heading) =
  (
    get_heading.MainMissionId!heading ->
    HeadingState(heading)
  )
  []
  (
    set_heading.MainMissionId?newHeading ->
    HeadingState(newHeading)
  )
-}

CabinState2 =
	([| {|set_cabinPressure|} |] x : {1..maxNum} @   Cabin_IsNot(x))
		[| {|set_cabinPressure|} |] Cabin_Is(0)

Cabin_Is(x)=
	get_cabinPressure.MainMissionId.x -> Cabin_Is(x)
	[]
 	set_cabinPressure.MainMissionId?y:diff(num,{x}) -> Cabin_IsNot(x)
	[]
	set_cabinPressure.MainMissionId.x -> Cabin_Is(x)

Cabin_IsNot(x) =
	set_cabinPressure.MainMissionId.x -> Cabin_Is(x)
	[]
	set_cabinPressure.MainMissionId?y:diff(num,{x}) -> Cabin_IsNot(x)

OxyState2 =
	([| {|set_emergencyOxygen|} |] x : {1..maxNum} @   Oxy_IsNot(x))
		[| {|set_emergencyOxygen|} |] Oxy_Is(0)

	Oxy_Is(x)=
	get_emergencyOxygen.MainMissionId.x -> Oxy_Is(x)
	[]
	set_emergencyOxygen.MainMissionId?y:diff(num,{x}) -> Oxy_IsNot(x)
	[]
	set_emergencyOxygen.MainMissionId.x -> Oxy_Is(x)

	Oxy_IsNot(x) =
	set_emergencyOxygen.MainMissionId.x -> Oxy_Is(x)
	[]
	set_emergencyOxygen.MainMissionId?y:diff(num,{x}) -> Oxy_IsNot(x)

FuelState2=
	([| {|set_fuelRemaining|} |] x : {1..maxNum} @   Fuel_IsNot(x))
		[| {|set_fuelRemaining|} |] Fuel_Is(0)

	Fuel_Is(x)=
	get_fuelRemaining.MainMissionId.x -> Fuel_Is(x)
	[]
	set_fuelRemaining.MainMissionId?y:diff(num,{x}) -> Fuel_IsNot(x)
	[]
	set_fuelRemaining.MainMissionId.x -> Fuel_Is(x)

	Fuel_IsNot(x) =
	set_fuelRemaining.MainMissionId.x -> Fuel_Is(x)
	[]
	set_fuelRemaining.MainMissionId?y:diff(num,{x}) -> Fuel_IsNot(x)

AltitudeState2 =
	([| {|set_altitude|} |] x : {1..maxNum} @   Alt_IsNot(x))
		[| {|set_altitude|} |] Alt_Is(0)

	Alt_Is(x)=
	get_altitude.MainMissionId.x -> Alt_Is(x)
	[]
	set_altitude.MainMissionId?y:diff(num,{x}) -> Alt_IsNot(x)
	[]
	set_altitude.MainMissionId.x -> Alt_Is(x)

	Alt_IsNot(x) =
	set_altitude.MainMissionId.x -> Alt_Is(x)
	[]
	set_altitude.MainMissionId?y:diff(num,{x}) -> Alt_IsNot(x)


AirSpeedState2=
	([| {|set_airSpeed|} |] x : {1..maxNum} @   Air_IsNot(x))
		[| {|set_airSpeed|} |] Air_Is(0)

	Air_Is(x)=
	get_airSpeed.MainMissionId.x -> Air_Is(x)
	[]
	set_airSpeed.MainMissionId?y:diff(num,{x}) -> Air_IsNot(x)
	[]
	set_airSpeed.MainMissionId.x -> Air_Is(x)

	Air_IsNot(x) =
	set_airSpeed.MainMissionId.x -> Air_Is(x)
	[]
	set_airSpeed.MainMissionId?y:diff(num,{x}) -> Air_IsNot(x)


HeadingState2 =
	([| {|set_heading|} |] x : {1..maxNum} @   Heading_IsNot(x))
		[| {|set_heading|} |] Heading_Is(0)

	Heading_Is(x)=
	get_heading.MainMissionId.x -> Heading_Is(x)
	[]
	set_heading.MainMissionId?y:diff(num,{x}) -> Heading_IsNot(x)
	[]
	set_heading.MainMissionId.x -> Heading_Is(x)

	Heading_IsNot(x) =
	set_heading.MainMissionId.x -> Heading_Is(x)
	[]
	set_heading.MainMissionId?y:diff(num,{x}) -> Heading_IsNot(x)


--APPInitializePhase(MainMissionId) =
InitializePhase_mm =
  initializeCall.MainMissionId   ->
  register!ACModeChangerId!MainMissionId  ->
  register!EnvironmentMonitorId!MainMissionId  ->
  register!FlightSensorsMonitorId!MainMissionId ->
  register!CommunicationsHandlerId!MainMissionId ->
  register!ControlHandlerId!MainMissionId  ->
  initializeRet.MainMissionId  ->
 --SKIP
 MissionPhase(MainMissionId, {  FlightSensorsMonitorId, CommunicationsHandlerId, ControlHandlerId, EnvironmentMonitorId, ACModeChangerId})
--

--APPCleanupMission(MainMissionId) =CleanupPhase_mm
CleanupPhase_mm =
 cleanupMissionCall.MainMissionId  ->
 cleanupMissionRet.MainMissionId?false ->
 SKIP

GetCabinPressure_mm =
	getCabinPressureCall.MainMissionId ->
	get_cabinPressure.MainMissionId?cabinPressure ->
	getCabinPressureRet.MainMissionId!cabinPressure ->
	SKIP

SetCabinPressure_mm =
	setCabinPressure.MainMissionId?newCabinPressure ->
	set_cabinPressure.MainMissionId!newCabinPressure ->
	SKIP

GetFuelRemaining_mm =
	getFuelRemainingCall.MainMissionId ->
	get_fuelRemaining.MainMissionId?fuelRemaining ->
	getFuelRemainingRet.MainMissionId!fuelRemaining ->
	SKIP

SetFuelRemaining_mm =
	setFuelRemaining.MainMissionId?newFuelRemaining ->
	set_fuelRemaining.MainMissionId!newFuelRemaining ->
	SKIP

GetAltitude_mm =
	getAltitudeCall?Schedulable!MainMissionId ->
	get_altitude.MainMissionId?altitude ->
	getAltitudeRet!Schedulable!MainMissionId!altitude ->
	SKIP

SetAltitude_mm =
	setAltitude?Schedulable!MainMissionId?newAltitude ->
	set_altitude.MainMissionId!newAltitude ->
	SKIP

GetAirSpeed_mm =
	getAirSpeedCall.MainMissionId ->
	get_airSpeed.MainMissionId?airSpeed ->
	getAirSpeedRet.MainMissionId!airSpeed ->
	SKIP

SetAirSpeed_mm =
	setAirSpeed.MainMissionId?newAirSpeed ->
	set_airSpeed.MainMissionId!newAirSpeed ->
	SKIP

GetEmergencyOxygen_mm =
	getEmergencyOxygenCall.MainMissionId ->
	get_emergencyOxygen.MainMissionId?emergencyOxygen ->
	getEmergencyOxygenRet.MainMissionId!emergencyOxygen ->
	SKIP

SetEmergencyOxygen_mm =
	setEmergencyOxygen.MainMissionId?newEmergencyOxygen ->
	set_emergencyOxygen.MainMissionId!newEmergencyOxygen ->
	SKIP

GetHeading_mm =
	getHeadingCall.MainMissionId ->
	get_heading.MainMissionId?heading->
	getHeadingRet.MainMissionId!heading ->
	SKIP

SetHeading_mm =
	setHeading.MainMissionId?newHeading ->
	set_heading.MainMissionId!newHeading ->
	SKIP

Methods_mm =
(
--	InitializePhase_mm
	--[]
--	CleanupPhase_mm
--	[]
	GetCabinPressure_mm
	[]
	SetCabinPressure_mm
	[]
	GetFuelRemaining_mm
	[]
	SetFuelRemaining_mm
	[]
	GetAltitude_mm
	[]
	SetAltitude_mm
	[]
	GetAirSpeed_mm
	[]
	SetAirSpeed_mm
	[]
	GetEmergencyOxygen_mm
	[]
	SetEmergencyOxygen_mm
	[]
	GetHeading_mm
	[]
	SetHeading_mm
) ; Methods_mm



--Mode Changer
channel get_modesLeft : SchedulableID.{0..3}
channel set_modesLeft : SchedulableID.{0..3}

channel get_currentMode : SchedulableID.MissionID
channel set_currentMode : SchedulableID.MissionID




nametype ModeChangerStateSync =
	{|get_modesLeft, set_modesLeft, get_currentMode, set_currentMode |}

ACModeChangerApp =
(
  Methods_mc
    [|ModeChangerStateSync|]
  ModeChangerState_mc(3, nullMissionId)
) \ModeChangerStateSync
/\ (end_sequencer_app.ACModeChangerId -> SKIP)


ModeChangerState_mc(modesLeft, currentMode) =
(
	get_modesLeft.ACModeChangerId!modesLeft ->
	ModeChangerState_mc(modesLeft, currentMode)
)
[]
(
	set_modesLeft.ACModeChangerId?newModesLeft ->
	ModeChangerState_mc(newModesLeft, currentMode)
)
{-
[]
(
	get_currentMode.ACModeChangerId!currentMode ->
	ModeChangerState_mc(modesLeft, currentMode)
)
[]
(
	set_currentMode.ACModeChangerId?newCurrentMode ->
	ModeChangerState_mc(modesLeft, newCurrentMode)
)
-}

GetNextMission_mc =
    getNextMissionCall.ACModeChangerId ->

    get_modesLeft.ACModeChangerId?modesLeft ->
    if modesLeft == 3 then
    (
      set_modesLeft.ACModeChangerId!2 ->

    getNextMissionRet.ACModeChangerId!TakeOffModeId ->
      SKIP
    )
    else
    (
      if modesLeft == 2 then
      (
        set_modesLeft.ACModeChangerId!1 ->

      getNextMissionRet.ACModeChangerId!CruiseModeId ->
        SKIP
      )
      else
      (
        if modesLeft == 1 then
        (
          set_modesLeft.ACModeChangerId!0 ->

          getNextMissionRet.ACModeChangerId!LandModeId ->
          --done_mission.LandModeId?_ ->

          SKIP
        )
        else
        (

        getNextMissionRet.ACModeChangerId!nullMissionId ->



          SKIP
        )
      )
    )

Methods_mc =
(
	GetNextMission_mc
) ; Methods_mc

--- Environment Monitor

channel checkEnvironment : SchedulableID.Bool


EnvironmentMonitorApp =
(
	Methods_em
)
/\ (end_periodicEventHandler_app.EnvironmentMonitorId -> SKIP)

Methods_em =
	handleAsyncEvent_em ; Methods_em

handleAsyncEvent_em =
	handleAsyncEventCall.EnvironmentMonitorId ->
	setCabinPressure.MainMissionId!0 ->
	setEmergencyOxygen.MainMissionId!0 ->
	setFuelRemaining.MainMissionId!0 ->


  handleAsyncEventRet.EnvironmentMonitorId ->
  SKIP


--- Control Handler

channel handleControls : SchedulableID

ControlHandlerApp =
(
	Methods_ch
)
/\ (end_aperiodicEventHandler_app.ControlHandlerId -> SKIP)

Methods_ch =
	handleAsyncEvent_ch ; Methods_ch

handleAsyncEvent_ch =
	handleAsyncEventCall.ControlHandlerId ->
	handleControls.ControlHandlerId ->
  handleAsyncEventRet.ControlHandlerId ->
  SKIP

--- CommunicationsHandler

channel handleComms : SchedulableID

CommunicationsHandlerApp =
(
	Methods_comh
)
/\ (end_aperiodicEventHandler_app.CommunicationsHandlerId -> SKIP)

Methods_comh =
	handlerAsyncEvent_comh ; Methods_comh

handlerAsyncEvent_comh =
	handleAsyncEventCall.CommunicationsHandlerId ->
	handleComms.CommunicationsHandlerId ->
  handleAsyncEventRet.CommunicationsHandlerId ->
  SKIP

--FlightSensorsMonitor
FlightSensorsMonitorApp =
(
	Methods_fsm
)
/\ (end_periodicEventHandler_app.FlightSensorsMonitorId -> SKIP)

Methods_fsm =
	handlerAsyncEvent_fsm ; Methods_fsm

handlerAsyncEvent_fsm =
	handleAsyncEventCall.FlightSensorsMonitorId ->
	setAirSpeed.MainMissionId!2 ->
	setAltitude.FlightSensorsMonitorId.MainMissionId!2 ->
	setHeading.MainMissionId!2 ->
  requestTerminationCall.MainMissionId.FlightSensorsMonitorId ->
  requestTerminationRet.MainMissionId.FlightSensorsMonitorId?_ ->
  handleAsyncEventRet.FlightSensorsMonitorId ->
  SKIP

-- TakeOffMission

channel get_abort : MissionID.Bool
channel set_abort : MissionID.Bool

channel get_landingGearDeployed : MissionID.Bool
channel set_landingGearDeployed : MissionID.Bool

channel abort : MissionID
channel stowLandingGear : SchedulableID.MissionID
channel isLandingGearDeployedCall : SchedulableID.MissionID
channel isLandingGearDeployedRet : SchedulableID.MissionID.Bool
channel deployLandingGear : SchedulableID.MissionID

channel binder_abort : MissionID
channel binder_stowLandingGear : SchedulableID.MissionID
channel binder_isLandingGearDeployedCall : SchedulableID.MissionID
channel binder_isLandingGearDeployedRet : SchedulableID.MissionID.Bool
channel binder_deployLandingGear : SchedulableID.MissionID

TakeOffMissionStateSync = {| get_abort, set_abort, get_landingGearDeployed, set_landingGearDeployed  |}
TakeOffMissionMethSync = {|abort, stowLandingGear, isLandingGearDeployedCall, isLandingGearDeployedRet, deployLandingGear |}



TakeOffMissionApp =
sbdia(
	Methods_tom
	[| TakeOffMissionStateSync |]
	TakeOffMissionState(false,true)

) \ TakeOffMissionStateSync
/\ (end_mission_app.TakeOffModeId -> SKIP )


TakeOffMissionState(abortVar, landingGearDeployed) =
((
	get_abort.TakeOffModeId!abortVar->
	TakeOffMissionState(abortVar, landingGearDeployed)
)
[]
(
	set_abort.TakeOffModeId?newAbortVar ->
	TakeOffMissionState(newAbortVar, landingGearDeployed)
)
[]
(
	get_landingGearDeployed.TakeOffModeId!landingGearDeployed ->
	TakeOffMissionState(abortVar, landingGearDeployed)
)
[]
(
	set_landingGearDeployed.TakeOffModeId?newLandingGearDeployed ->
	TakeOffMissionState(abortVar, newLandingGearDeployed)
))

--APPInitializePhase(TakeOffModeId) =
InitializePhase_tom =
  initializeCall.TakeOffModeId  ->

  register!TakeOffMonitorId!TakeOffModeId ->
  register!TakeOffFailureHandlerId!TakeOffModeId ->
  register!LandingGearHandler1Id!TakeOffModeId ->

  initializeRet.TakeOffModeId ->
  --SKIP
 MissionPhase(TakeOffModeId, {TakeOffMonitorId, LandingGearHandler1Id ,TakeOffFailureHandlerId })

--APPCleanupMission(TakeOffModeId) =
CleanupPhase_tom =
 cleanupMissionCall.TakeOffModeId ->
(
 get_abort.TakeOffModeId?false ->
 cleanupMissionRet.TakeOffModeId!true -> SKIP
)
[]
(
  get_abort.TakeOffModeId?false ->
  cleanupMissionRet.TakeOffModeId!true ->
  SKIP
)

Abort_tom =
	abort.TakeOffModeId ->
	set_abort.TakeOffModeId!true ->
	SKIP

StowLandingGear_tom =
	stowLandingGear?schedulable!TakeOffModeId ->
	set_landingGearDeployed.TakeOffModeId!false ->
	SKIP

IsLandingGearDeployed_tom =
	isLandingGearDeployedCall?schedulable!TakeOffModeId ->
	get_landingGearDeployed.TakeOffModeId?landingGearDeployed ->
	isLandingGearDeployedRet!schedulable!TakeOffModeId!landingGearDeployed ->
	SKIP

DeployLandingGear_tom =
	deployLandingGear?schedulable!TakeOffModeId ->
	set_landingGearDeployed.TakeOffModeId!true ->
	SKIP


Methods_tom =
(
	--InitializePhase_tom
	--[]
	--CleanupPhase_tom
	--[]
	Abort_tom
	[]
	StowLandingGear_tom
	[]
	DeployLandingGear_tom
	[]
	IsLandingGearDeployed_tom
) ; Methods_tom


-- TakeOffMonitor

TakeOffMonitorApp(takeOffAltitude, landingGearHandler) =
(
	Methods_tomon(takeOffAltitude, landingGearHandler)
)
/\ (end_periodicEventHandler_app.TakeOffMonitorId -> SKIP)

Methods_tomon(takeOffAltitude, landingGearHandler) =
	handlerAsyncEvent_tomon(takeOffAltitude, landingGearHandler) ; Methods_tomon(takeOffAltitude, landingGearHandler)

handlerAsyncEvent_tomon(takeOffAltitude, landingGearHandler) =
	handleAsyncEventCall.TakeOffMonitorId ->
	getAltitudeCall.TakeOffMonitorId.MainMissionId ->
	getAltitudeRet.TakeOffMonitorId.MainMissionId?altitude:{1,2} ->
	(
		if altitude > takeOffAltitude then
		(
    	release.landingGearHandler ->
			requestTerminationCall.TakeOffModeId.TakeOffMonitorId ->
			requestTerminationRet.TakeOffModeId.TakeOffMonitorId?_ ->
			SKIP
		)
		else
			SKIP
	)
	;
    handleAsyncEventRet.TakeOffMonitorId ->
    SKIP


-- TakeOffFailureHandler

channel continueAndLand : MissionID

TakeOffFailureHandlerApp(threshold) =
(
	Methods_tofh(threshold)
)
/\ (end_aperiodicEventHandler_app.TakeOffFailureHandlerId -> SKIP)

Methods_tofh(threshold) =
	handlerAsyncEvent_tofh(threshold) ; Methods_tofh(threshold)

handlerAsyncEvent_tofh(threshold) =
	handleAsyncEventCall.TakeOffFailureHandlerId ->
	getAirSpeedCall.MainMissionId ->
	getAirSpeedRet.MainMissionId?currentSpeed ->
	(
		if currentSpeed < threshold then
		(
			abort.TakeOffModeId ->
			requestTerminationCall.TakeOffModeId.TakeOffFailureHandlerId ->
			requestTerminationRet.TakeOffModeId.TakeOffFailureHandlerId?_ ->
			SKIP
		)
		else
			continueAndLand.TakeOffModeId ->
			SKIP
	)
	;
    handleAsyncEventRet.TakeOffFailureHandlerId ->
    SKIP



-- LandingGearHandler1

LandingGearHandlerApp1 =
(
	Methods_lgh1
)
/\ (end_aperiodicEventHandler_app.LandingGearHandler1Id -> SKIP)

Methods_lgh1 =
	handlerAsyncEvent_lgh1 ; Methods_lgh1

handlerAsyncEvent_lgh1 =
	handleAsyncEventCall.LandingGearHandler1Id ->
	isLandingGearDeployedCall.LandingGearHandler1Id.TakeOffModeId ->
	isLandingGearDeployedRet.LandingGearHandler1Id.TakeOffModeId?landingGearIsDeployed ->
	(
		if landingGearIsDeployed == true then
		(
			stowLandingGear.LandingGearHandler1Id.TakeOffModeId ->
			SKIP
		)
		else
		(
			deployLandingGear.LandingGearHandler1Id.TakeOffModeId ->
			SKIP
		)
	)
	;
  handleAsyncEventRet.LandingGearHandler1Id ->
  SKIP


-- CruiseMission





CruiseMissionApp =
--(
	--Methods_cm
--)
--/\
 (end_mission_app.CruiseModeId -> SKIP )

--APPInitializePhase(CruiseModeId) =
InitializePhase_cm =
  initializeCall.CruiseModeId  ->

  register!NavigationMonitorId!CruiseModeId ->

  register!BeginLandingHandlerId!CruiseModeId ->

  initializeRet.CruiseModeId ->
--  SKIP
MissionPhase(CruiseModeId, {NavigationMonitorId, BeginLandingHandlerId})

--APPCleanupMission(CruiseModeId) =
CleanupPhase_cm =
 cleanupMissionCall.CruiseModeId ->
 cleanupMissionRet.CruiseModeId!True ->
 SKIP

{-Methods_cm =
(
	InitializePhase_cm
	[]
	CleanupPhase_cm
) ; Methods_cm
-}

-- NavigationMonitor
NavigationMonitorApp =
(
	Methods_nm
)
/\ (end_periodicEventHandler_app.NavigationMonitorId -> SKIP)

Methods_nm =
	handlerAsyncEvent_nm ; Methods_nm

handlerAsyncEvent_nm =
	handleAsyncEventCall.NavigationMonitorId ->

	getHeadingCall.MainMissionId ->
	getHeadingRet.MainMissionId?heading ->
	getAirSpeedCall.MainMissionId ->
	getAirSpeedRet.MainMissionId?airSpeed ->
	getAltitudeCall.NavigationMonitorId.MainMissionId ->
	getAltitudeRet.NavigationMonitorId.MainMissionId?airSpeed ->

    handleAsyncEventRet.NavigationMonitorId ->
    SKIP



--BeginLandingHandler + LandSim Smushed



BeginLandingHandlerApp =
(
	Methods_blh
)
/\ (end_periodicEventHandler_app.BeginLandingHandlerId -> SKIP)

Methods_blh =
	handlerAsyncEvent_blh ; Methods_blh

handlerAsyncEvent_blh =

	handleAsyncEventCall.BeginLandingHandlerId ->
	requestTerminationCall.CruiseModeId.BeginLandingHandlerId ->
	requestTerminationRet.CruiseModeId.BeginLandingHandlerId?_ ->
  handleAsyncEventRet.BeginLandingHandlerId ->
  SKIP



-- LandMission

channel updateGroundDistance : MissionID.{50}

LandMissionApp =
(
	Methods_lam
)
/\ (end_mission_app.LandModeId -> SKIP )

--APPInitializePhase(LandModeId) =
InitializePhase_lam =
  initializeCall.LandModeId  ->

  register!GroundDistanceMonitorId!LandModeId ->
  register!LandingGearHandler2Id!LandModeId ->
--  register!SafeLandingHandlerId!LandModeId ->
  --register!InstrumentLandingSystemMonitorId!LandModeId ->

  initializeRet.LandModeId ->
--  SKIP
  MissionPhase(LandModeId, {GroundDistanceMonitorId, LandingGearHandler2Id})-- , SafeLandingHandlerId}) --, InstrumentLandingSystemMonitorId})

--APPCleanupMission(LandModeId) =
CleanupPhase_lam =
 cleanupMissionCall.LandModeId ->
 cleanupMissionRet.LandModeId!false ->
 SKIP

StowLandingGear_lam =
	stowLandingGear?schedulable!LandModeId ->
	set_landingGearDeployed.LandModeId!false ->
	SKIP

IsLandingGearDeployed_lam =
	isLandingGearDeployedCall?schedulable!LandModeId ->
	get_landingGearDeployed.LandModeId?landingGearDeployed ->
	isLandingGearDeployedRet.schedulable.LandModeId!landingGearDeployed ->
	SKIP

DeployLandingGear_lam =
	deployLandingGear?schedulable!LandModeId ->
	set_landingGearDeployed.LandModeId!true ->
	SKIP

Methods_lam =
(
	--InitializePhase_lam
	--[]
	--CleanupPhase_lam
	--[]
	StowLandingGear_lam
	[]
	IsLandingGearDeployed_lam
	[]
	DeployLandingGear_lam
) ; Methods_lam


--GroundDistanceMonitor

GroundDistanceMonitorApp(readingOnGround, landingGear) =
(
	Methods_gdm(readingOnGround, landingGear)
)
/\ (end_periodicEventHandler_app.GroundDistanceMonitorId -> SKIP)

Methods_gdm(readingOnGround, landingGear) =
	handlerAsyncEvent_gdm(readingOnGround, landingGear) ;
  Methods_gdm(readingOnGround, landingGear)

handlerAsyncEvent_gdm(readingOnGround, landingGear) =
	handleAsyncEventCall.GroundDistanceMonitorId ->
	getAltitudeCall.GroundDistanceMonitorId.MainMissionId ->
	getAltitudeRet.GroundDistanceMonitorId.MainMissionId?distance:{0,1} ->
	(
    if distance == 1 then
    (
      release.landingGear ->
      requestTerminationCall.LandModeId.GroundDistanceMonitorId ->
      requestTerminationRet.LandModeId.GroundDistanceMonitorId?_ ->
      SKIP
    )
    else
    (
  		if distance == readingOnGround then
  		(
  			requestTerminationCall.LandModeId.GroundDistanceMonitorId ->
  			requestTerminationRet.LandModeId.GroundDistanceMonitorId?_ ->
  			SKIP
  		)
  		else
  			SKIP
    )
	)
	;
  handleAsyncEventRet.GroundDistanceMonitorId ->
  SKIP


-- LandingGearHandler2

LandingGearHandlerApp2 =
(
	Methods_lgh2
)
/\ (end_aperiodicEventHandler_app.LandingGearHandler2Id -> SKIP)

Methods_lgh2 =
	handlerAsyncEvent_lgh2 ; Methods_lgh2

handlerAsyncEvent_lgh2 =
	handleAsyncEventCall.LandingGearHandler2Id ->
	isLandingGearDeployedCall.LandingGearHandler2Id.LandModeId ->
	isLandingGearDeployedRet.LandingGearHandler2Id.LandModeId?landingGearIsDeployed ->
	(
		if landingGearIsDeployed == true then
		(
			stowLandingGear.LandingGearHandler2Id.LandModeId ->
			SKIP
		)
		else
		(
			deployLandingGear.LandingGearHandler2Id.LandModeId ->
			SKIP
		)
	)
	;
	--requestTerminationCall.LandModeId.LandingGearHandler2Id  ->
	--requestTerminationRet.LandModeId.LandingGearHandler2Id?_  ->
  handleAsyncEventRet.LandingGearHandler2Id ->
  SKIP

-- InstrumentLandingSystemMonitor
channel checkILS : {InstrumentLandingSystemMonitorId}

InstrumentLandingSystemMonitorApp =
(
	Methods_tlsm
)
/\ (end_periodicEventHandler_app.InstrumentLandingSystemMonitorId -> SKIP)

Methods_tlsm =
	handlerAsyncEvent_tlsm ; Methods_tlsm

handlerAsyncEvent_tlsm =
	handleAsyncEventCall.InstrumentLandingSystemMonitorId ->
	checkILS.InstrumentLandingSystemMonitorId ->
  handleAsyncEventRet.InstrumentLandingSystemMonitorId ->
  SKIP



-- SafeLandingHandler

channel PullUp : {SafeLandingHandlerId}
channel ContinueLanding : {SafeLandingHandlerId}

SafeLandingHandlerApp(threshold) =
(
	Methods_slh(threshold)
)
/\ (end_aperiodicEventHandler_app.SafeLandingHandlerId -> SKIP)

Methods_slh(threshold) =
	handlerAsyncEvent_slh(threshold) ; Methods_slh(threshold)

handlerAsyncEvent_slh(threshold) =
	handleAsyncEventCall.SafeLandingHandlerId ->
	getAltitudeCall.SafeLandingHandlerId.MainMissionId ->
	getAltitudeRet.SafeLandingHandlerId.MainMissionId?altitude ->
	(
		if altitude < threshold then
		(
			PullUp.SafeLandingHandlerId ->
			SKIP
		)
		else
		(
			ContinueLanding.SafeLandingHandlerId ->
			SKIP
		)
	) ;
  handleAsyncEventRet.SafeLandingHandlerId ->
  SKIP




nametype TopLevelMissionSequencerProgramSync = {|done_safeletFW, start_mission, done_mission, done_toplevel_sequencer|}

AircraftControlTier =
	sbdia(
  (SafeletFW [| SafeltAppSync |] ACSafelet)
		[|SafeletTierSync|]
  sbdia(TopLevelMissionSequencers({MainMissionSequencerId}) [|MissionSequencerAppSync|] MainMissionSequencerApp))

--assert AircraftControlTier ; Loop :[ deadlock free [FD] ]
--assert AircraftControlTier :[ divergence free ]
--assert AircraftControlTier :[ deterministic  [FD] ]

AircraftTier0 =
	sbdia( MissionFW(MainMissionId) [| MissionAppSync |] MainMissionApp )

    [| union( MissionSync, {|requestTerminationCall.MainMissionId , requestTerminationRet.MainMissionId,
                                release.ControlHandlerId, release.CommunicationsHandlerId  |})
    {-, {|getAltitudeCall, getAltitudeRet, getCabinPressureCall, getCabinPressureRet, getEmergencyOxygenCall,
      getEmergencyOxygenRet, getFuelRemainingCall, getFuelRemainingRet,
                  getHeadingCall, getHeadingRet, getAirSpeedCall, getAirSpeedRet,
                 setAirSpeed, setAltitude, setHeading, setCabinPressure, setEmergencyOxygen, setFuelRemaining
                  |} )  -}
                 |]

		(
  			sbdia(PeriodicEventHandlerFW(FlightSensorsMonitorId, 1, 0, 0, nullSchedulableId)  [| PEHAppSync |]  FlightSensorsMonitorApp)
      			[| SchedSync |]
      (
  			sbdia(PeriodicEventHandlerFW(EnvironmentMonitorId, 1, 0, 0, nullSchedulableId) [| PEHAppSync |] EnvironmentMonitorApp)
  				[| SchedSync |]
      (
        sbdia(SchedulableMissionSequencerFW(ACModeChangerId) [| MissionSequencerAppSync|] ACModeChangerApp)
    				[| SchedSync |]
        sbdia  (
            sbdia(AperiodicEventHandlerFW(ControlHandlerId, aperiodic, 0, nullSchedulableId) [| APEHAppSync |] ControlHandlerApp)
        				[| SchedSync |]
        		sbdia(AperiodicEventHandlerFW(CommunicationsHandlerId, aperiodic, 0, nullSchedulableId) [| APEHAppSync |] CommunicationsHandlerApp)
          )
        )
      )
    )

assert sbdia(PeriodicEventHandlerFW(EnvironmentMonitorId, 1, 0, 0, nullSchedulableId) [| PEHAppSync |] EnvironmentMonitorApp) ; Loop :[ deadlock free [FD] ]
assert sbdia(SchedulableMissionSequencerFW(ACModeChangerId) [| MissionSequencerAppSync |] ACModeChangerApp) ; Loop :[ deadlock free [FD] ]

assert AircraftTier0 ; Loop :[ deadlock free [FD] ]
--assert AircraftTier0 :[ divergence free ]
--assert AircraftTier0 :[ deterministic  [FD] ]
{-
Tier0App =
(
	sbdia( MissionFW(TopMissionId) [| MissionAppSync |] TopMissionApp)
	 [|MissionSync|]
   (
      sbdia( SchedulableMissionSequencerFW(MidMissionSequencerId) [| MissionSequencerAppSync |] MidMissionSequencerApp )
      	[|{| activate_schedulables, done_safeletFW, done_toplevel_sequencer |}|]
      sbdia( ManagedThreadFW(ManagedThread1Id ) [| MTAppSync |] ManagedThread1App )
   )
)
-}


AircraftTier1 =
	T1Cluster0
	;
	T1Cluster1
	;
	T1Cluster2

T1Cluster0 =
(
	sbdia(MissionFW(TakeOffModeId) [| MissionAppSync |] TakeOffMissionApp)
	[|  Union({ TakeOffMissionMethSync, MissionSync , {| requestTerminationCall.TakeOffModeId, requestTerminationRet.TakeOffModeId,
                                                            stowLandingGear, deployLandingGear |} }) |]
(
	(
		sbdia(	PeriodicEventHandlerFW(TakeOffMonitorId, 1, 0, 0, nullSchedulableId)   [| PEHAppSync |] TakeOffMonitorApp(0, LandingGearHandler1Id))
			[| union(SchedSync, {|release.LandingGearHandler1Id|} ) |]
		sbdia(AperiodicEventHandlerFW(LandingGearHandler1Id, aperiodic, 0, nullSchedulableId) [| APEHAppSync |] LandingGearHandlerApp1)
	)
		[| union (SchedSync ,  {| release.TakeOffFailureHandlerId, abort, requestTerminationCall.TakeOffModeId.TakeOffFailureHandlerId,
                            requestTerminationRet.TakeOffModeId.TakeOffFailureHandlerId |} ) |]
	sbdia(AperiodicEventHandlerFW(TakeOffFailureHandlerId, aperiodic, 0, nullSchedulableId)  [| APEHAppSync |]   TakeOffFailureHandlerApp(0))
)
)

--assert MissionFW(TakeOffModeId) [| MissionAppSync |] TakeOffMissionApp ; Loop :[ deadlock free [FD] ]

T1Cluster1 =
(
	sbdia(MissionFW(CruiseModeId) [| MissionAppSync |] CruiseMissionApp	)
		 [| MissionSync |]
	( -- Making this a Periodic so that it actually triggers termination
    sbdia(PeriodicEventHandlerFW(BeginLandingHandlerId, 2,0, 0, nullSchedulableId)	[| PEHAppSync |] BeginLandingHandlerApp)
      [| SchedSync |]
    sbdia(PeriodicEventHandlerFW(NavigationMonitorId, 1, 0, 0, nullSchedulableId) [| PEHAppSync |]  NavigationMonitorApp)
  )
)

T1Cluster2 =
(
	sbdia(MissionFW(LandModeId) [| MissionAppSync |] LandMissionApp)
		[| union(MissionSync, {| requestTerminationCall.LandModeId, requestTerminationRet.LandModeId,
                              deployLandingGear, isLandingGearDeployedCall, isLandingGearDeployedRet
                               , stowLandingGear |} ) |]
  (
  -- Removed form applicatino in Appendix
  --  (sbdia(AperiodicEventHandlerFW(SafeLandingHandlerId, aperiodic, 0, nullSchedulableId) [| APEHAppSync |] SafeLandingHandlerApp(0))
  --    [| union(SchedSync, {|release.SafeLandingHandlerId|} ) |]
  --  (sbdia(PeriodicEventHandlerFW(InstrumentLandingSystemMonitorId, 1, 0, 0, nullSchedulableId)[| PEHAppSync |]  InstrumentLandingSystemMonitorApp	)
    --  [| SchedSync |]
    ( sbdia(PeriodicEventHandlerFW(GroundDistanceMonitorId, 1, 0, 0, nullSchedulableId) [| PEHAppSync |]  GroundDistanceMonitorApp(0, LandingGearHandler2Id))
        [| union(SchedSync, {|release.LandingGearHandler2Id|} ) |]
      sbdia(AperiodicEventHandlerFW(LandingGearHandler2Id, aperiodic, 0, nullSchedulableId)  [| APEHAppSync |]  LandingGearHandlerApp2)
    )
    --)
  --  )
  )
)

--Requires getAltitudeRet to be restricted to {1,2} or similar
assert T1Cluster0 ; Loop :[ deadlock free [FD] ]

assert T1Cluster1 ; Loop :[ deadlock free [FD] ]

--Requires getAltitudeRet to be restricted to {0,1} and the removal of ILS...
assert T1Cluster2 ; Loop :[ deadlock free [FD] ]

assert AircraftTier1 ; Loop :[ deadlock free [F] ]


Aircraft2 =
(
(
(
	AircraftControlTier
	[|TierSync|]
	(
		AircraftTier0
			[|  Tier0Sync |]
		AircraftTier1
	)
)
  [| {|  getEmergencyOxygenRet, getFuelRemainingCall, getFuelRemainingRet,
                getHeadingCall, getHeadingRet, getAirSpeedCall, getAirSpeedRet,
               setAirSpeed, setAltitude, setHeading, setCabinPressure, setEmergencyOxygen, setFuelRemaining, end_mission_app|}  |]
    sbdia (Methods_mm
    		[| MainMissionStateSync |]
    	MainMissionState(0, 0, 0, 0, 0, 0)
    )/\ (end_mission_app.MainMissionId -> SKIP)

)
 [| GSRSync |]
GlobalSchedulableRegulator
)



Tier0ModWithState =
( AircraftTier0
{-    [| {| start_mission.m, done_mission.m, initializeRet.m | m <- {TakeOffModeId, CruiseModeId, LandModeId}  |}|]
  start_mission.TakeOffModeId.ACModeChangerId -> initializeRet.TakeOffModeId -> done_mission.TakeOffModeId.true ->
  start_mission.CruiseModeId.ACModeChangerId -> initializeRet.CruiseModeId -> done_mission.CruiseModeId.true ->
  start_mission.LandModeId.ACModeChangerId -> initializeRet.LandModeId -> done_mission.LandModeId.false ->
--  requestTerminationCall.MainMissionId.GroundDistanceMonitorId -> requestTerminationRet.MainMissionId.GroundDistanceMonitorId?_ ->
  SKIP-}
)
[| {|  getEmergencyOxygenRet, getFuelRemainingCall, getFuelRemainingRet, getAltitudeCall, getAltitudeRet,
        getCabinPressureCall, getCabinPressureRet, getEmergencyOxygenCall, getEmergencyOxygenRet,
              getHeadingCall, getHeadingRet, getAirSpeedCall, getAirSpeedRet,
             setAirSpeed, setAltitude, setHeading, setCabinPressure, setEmergencyOxygen, setFuelRemaining, end_mission_app.MainMissionId|}  |]
(
  sbdia (Methods_mm
      [| MainMissionStateSync |]
    MainMissionState(0, 0, 0, 0, 0, 0)
  )/\ (end_mission_app.MainMissionId -> SKIP)
)

-- THIS STILL DEADLOCKS
assert Tier0ModWithState ; Loop :[ deadlock free ]

Tier1WithState =
AircraftTier1
[| {|  getEmergencyOxygenRet, getFuelRemainingCall, getFuelRemainingRet,
              getHeadingCall, getHeadingRet, getAirSpeedCall, getAirSpeedRet,
             setAirSpeed, setAltitude, setHeading, setCabinPressure, setEmergencyOxygen, setFuelRemaining, done_mission.LandModeId |}  |]
  sbdia (Methods_mm
      [| MainMissionStateSync |]
    MainMissionState(0, 0, 0, 0, 0, 0)
  )/\(done_mission.LandModeId?_ -> SKIP)

--This seems to work, COMPOSITIONAL? Have to be...
assert Tier1WithState ; Loop :[ deadlock free ]


assert Aircraft2 ; Loop :[ deadlock free ]
--assert Aircraft2 :[ divergence free ]
--assert Aircraft2 :[ deterministic  [F] ]
