
--include "Framework.csp"

include "FrameworkProcess.csp"

include "AppChan.csp"

--********************************************************
--************************APLICATION**********************
--********************************************************

-- SAFELET: MY APP

MyApp  =
	(
	 	Methods_s
	)
 /\	(end_safelet_app -> SKIP)

InitializeApplication_s =
     initializeApplicationCall ->
     initializeApplicationRet ->
     SKIP

GetSequencer_s =
	getSequencerCall ->
	getSequencerRet!TopLevelSequencerId ->
	SKIP

Methods_s =
 (
	GetSequencer_s
	[]
	InitializeApplication_s
 ); Methods_s


--TOP LEVEL SEQUENCER: MY SEQUENCER

channel get_sequencer_done : SchedulableID.Bool
channel set_sequencer_done : SchedulableID.Bool

nametype MissionSequencerAppStateSync = {| get_sequencer_done, set_sequencer_done |}


MainSequencerApp =
(
  Methods_tlms
    [|MissionSequencerAppStateSync|]
  DoneController_tlms(false)
)\ MissionSequencerAppStateSync
/\ (end_sequencer_app.TopLevelSequencerId -> SKIP)


DoneController_tlms(done) =
(
	get_sequencer_done.TopLevelSequencerId!done ->
	DoneController_tlms(done)
)
[]
(
	set_sequencer_done.TopLevelSequencerId?newDone ->
	DoneController_tlms(newDone)
)


GetNextMission_tlms =
  getNextMissionCall.TopLevelSequencerId ->
	get_sequencer_done.TopLevelSequencerId?done ->
	(
	  if done == false then
	  (
			set_sequencer_done.TopLevelSequencerId!true ->
			getNextMissionRet.TopLevelSequencerId!Tier0MissionId  ->
			SKIP
    )
	  else
	  (
			getNextMissionRet.TopLevelSequencerId!nullMissionId ->
		  SKIP
	  )
  )

Methods_tlms =
 (
	GetNextMission_tlms
 ) ; Methods_tlms






--TOP LEVEL MISSION: TOP MISSION 1


MainMissionApp =
(
	(
	--	(Methods_tlm1 )
	--	/\
		(end_mission_app.Tier0MissionId -> SKIP )
	)
)

APPInitializePhase(mission) =
--InitializePhase_tlm1 =
  initializeCall.Tier0MissionId   ->
  register!Tier0PEHId!Tier0MissionId  ->
  register!Tier0APEHId!Tier0MissionId  ->
  initializeRet.Tier0MissionId  ->
 MissionPhase(mission, {Tier0PEHId, Tier0APEHId})

APPCleanupMission(mission) =
--CleanupPhase_tlm1 =
 cleanupMissionCall.Tier0MissionId  ->
 cleanupMissionRet.Tier0MissionId?false ->
 SKIP

{-Methods_tlm1 =
(
	InitializePhase_tlm1
	[]
	CleanupPhase_tlm1
) ; Methods_tlm1
  -}


-- Tier 0 PEH APP

channel get_released : SchedulableID.Bool
channel set_released : SchedulableID.Bool

nametype Tier0OPEHAppStateSync = {|get_released,  set_released |}


Tier0OPEHApp =
(
	Methods_t0peh
		[| Tier0OPEHAppStateSync |]
	Tier0OPEHAppState(False)
)\Tier0OPEHAppStateSync
/\ (end_periodicEventHandler_app.Tier0PEHId -> SKIP)

Tier0OPEHAppState(released) =
(
	get_released.Tier0PEHId!released ->
	Tier0OPEHAppState(released)
)
[]
(
	set_released.Tier0PEHId?newReleased ->
	Tier0OPEHAppState(newReleased)
)

Methods_t0peh =
	handleAsyncEvent_t0peh ; Methods_t0peh

handleAsyncEvent_t0peh =
	handleAsyncEventCall.Tier0PEHId ->
	(
		(
			get_released.Tier0PEHId?false ->
			set_released.Tier0PEHId!true ->
			release.Tier0APEHId ->
			SKIP
		)
		[]
		(
			get_released.Tier0PEHId?true ->
			SKIP
		)
	);
  handleAsyncEventRet.Tier0PEHId ->
  SKIP



-- Tier 0 APEH APP

Tier0APEHApp =
(
	Methods_t0apeh
)
/\ (end_aperiodicEventHandler_app.Tier0APEHId -> SKIP)

Methods_t0apeh =
	handlerAsyncEvent_t0apeh ; Methods_t0apeh

handlerAsyncEvent_t0apeh =
	handleAsyncEventCall.Tier0APEHId ->
	requestTerminationCall.Tier0MissionId.Tier0APEHId ->
	requestTerminationRet.Tier0MissionId.Tier0APEHId?b ->
  handleAsyncEventRet.Tier0APEHId ->
  SKIP





nametype TopLevelMissionSequencerProgramSync = {|done_safeletFW, start_mission, done_mission, done_toplevel_sequencer|}

SchedulableProg =
	sbdia(AperiodicEventHandlerFW(Tier0APEHId, aperiodic, 0, nullSchedulableId) [| APEHAppSync |] Tier0APEHApp)
		[|{| release.Tier0APEHId , activate_schedulables, done_safeletFW, done_toplevel_sequencer |}|]
	sbdia(PeriodicEventHandlerFW(Tier0PEHId, 1,0,0,nullSchedulableId) [| PEHAppSync |] Tier0OPEHApp)

Program2 =
(
  (
    (
 	    sbdia(SafeletFW [| SafeltAppSync |] MyApp)
  	     [|SafeletTierSync|]
      sbdia(TopLevelMissionSequencers({TopLevelSequencerId}) [|MissionSequencerAppSync|] MainSequencerApp)
    )
      [|TierSync|]
    (
      sbdia( MissionFW(Tier0MissionId) [| MissionAppSync |] MainMissionApp)
        [|MissionSync|]
     SchedulableProg
    )
  )
    [| GSRSync |]
GlobalSchedulableRegulator
)


assert Program2 ; Loop :[ deadlock free [FD] ]
assert Program2  :[ deadlock free [FD] ]
assert Program2 :[ divergence free ]
assert Program2 :[ deterministic  [FD] ]


 assert STOP [FD= (Program2; Loop  \Events)
 assert (Program2; Loop \Events) [FD= STOP

assert STOP [T= Program2;Loop \ diff(Events, {|throw|})
