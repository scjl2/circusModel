
--include "Framework.csp"

include "FrameworkProcess.csp"

include "AppChan.csp"

--******************************
--********APLICATION************
--******************************

-- SAFELET: MY APP

nametype MyAppChanSet =
  {| getSequencerCall, getSequencerRet,initializeApplicationCall, initializeApplicationRet, end_safelet_app |}

MyApp  =
	(
	 	Methods_s
	)
 /\	(end_safelet_app -> SKIP)

GetSequencer_s =
	getSequencerCall ->
	getSequencerRet!TopLevelSequencerId ->
	SKIP

InitializeApplication_s =
  initializeApplicationCall ->
  initializeApplicationRet ->
  SKIP

Methods_s =
 (
	GetSequencer_s
	[]
	InitializeApplication_s
 ); Methods_s


--TOP LEVEL SEQUENCER: MY SEQUENCER

channel get_sequencer_done : SchedulableID.Bool
channel set_sequencer_done : SchedulableID.Bool

nametype MissionSequencerAppStateSync = {| get_sequencer_done, set_sequencer_done |}


nametype MySequencerAppChanSet =
  union(MissionSequencerAppStateSync,MissionSequencerAppSync)

TopSequencerApp =
(
  Methods_tlms
    [|MissionSequencerAppStateSync|]
  DoneController_tlms(False)
)\ MissionSequencerAppStateSync
/\ (end_sequencer_app.TopLevelSequencerId -> SKIP)


DoneController_tlms(doneVar) =
(
	get_sequencer_done.TopLevelSequencerId!doneVar ->
	DoneController_tlms(doneVar)
)
[]
(
	set_sequencer_done.TopLevelSequencerId?newDone ->
	DoneController_tlms(newDone)
)


GetNextMission_tlms =
  getNextMissionCall.TopLevelSequencerId ->
	get_sequencer_done.TopLevelSequencerId?doneVar ->
	(
	  if doneVar == False then
	  (
		set_sequencer_done.TopLevelSequencerId!True ->
		getNextMissionRet.TopLevelSequencerId!TopMissionId  ->
		SKIP
      )
	  else
	  (
			getNextMissionRet.TopLevelSequencerId!nullMissionId ->
		    SKIP
	  )
    )

Methods_tlms =
 (
	GetNextMission_tlms
 ) ; Methods_tlms






--TOP LEVEL MISSION: TOP MISSION 1

nametype TopMission1AppChanSet =
  {| initializeCall, initializeRet, cleanupMissionCall, cleanupMissionRet,
    register.MidMissionSequencerId.TopMissionId
    |}


TopMissionApp =
(
	--(Methods_tlm1 )
--	/\
	(end_mission_app.TopMissionId -> SKIP )
)


APPInitializePhase(mission) =
if mission == TopMissionId then
(
  initializeCall.TopMissionId ->
  register!ManagedThread1Id!TopMissionId ->
  register!MidMissionSequencerId!TopMissionId  ->
  initializeRet.TopMissionId  ->
  MissionPhase(TopMissionId, {ManagedThread1Id, MidMissionSequencerId})
)
else if mission == MidMissionAId then
(
initializeCall.MidMissionAId  ->
register!BottomMissionSequencerAId!MidMissionAId ->
initializeRet.MidMissionAId ->
MissionPhase(MidMissionAId, {BottomMissionSequencerAId})
)
else if mission == MidMissionBId then
(
initializeCall.MidMissionBId  ->
register!BottomMissionSequencerBId!MidMissionBId ->
initializeRet.MidMissionBId ->
MissionPhase(MidMissionBId, { BottomMissionSequencerBId})
)
else if mission == BottomMissionAId then
(
initializeCall.BottomMissionAId  ->
register!ManagedThread2Id!BottomMissionAId ->
register!Tier2OSEHId!BottomMissionAId ->
initializeRet.BottomMissionAId ->
MissionPhase(BottomMissionAId, {ManagedThread2Id, Tier2OSEHId})
)
else if mission == BottomMissionBId then
(
initializeCall.BottomMissionBId  ->
register!Tier2PEHId!BottomMissionBId ->
register!Tier2APEHId!BottomMissionBId ->
initializeRet.BottomMissionBId ->
MissionPhase(BottomMissionBId, {Tier2PEHId, Tier2APEHId})
)
else SKIP


APPCleanupMission(mission) =
  if mission == TopMissionId then
  (
  cleanupMissionCall.TopMissionId  ->
  cleanupMissionRet.TopMissionId?false ->
  SKIP
  )
  else if mission == MidMissionAId then
  (
  cleanupMissionCall.MidMissionAId ->
  cleanupMissionRet.MidMissionAId!True ->
 	SKIP
  )
  else if mission == MidMissionBId then
  (
  cleanupMissionCall.MidMissionBId ->
  cleanupMissionRet.MidMissionBId!True ->
  SKIP
  )
  else if mission == BottomMissionAId then
  (
  cleanupMissionCall.BottomMissionAId ->
  cleanupMissionRet.BottomMissionAId!True ->
   SKIP
  )
  else if mission == BottomMissionBId then
  (
  cleanupMissionCall.BottomMissionBId ->
  cleanupMissionRet.BottomMissionBId!True ->
   SKIP

  )
  else SKIP





--ManagedThread1App

ManagedThread1App =
(
	Methods_mt1
)
/\ (end_managedThread_app.ManagedThread1Id -> SKIP)

Methods_mt1 =
	Release_mt1

Release_mt1 =
	runCall.ManagedThread1Id ->
	runRet.ManagedThread1Id ->
	SKIP





--NESTED MISSION SEQUENCER
channel get_sequencer_releases : SchedulableID.num
channel set_sequencer_releases : SchedulableID.num


MidMissionSequencerApp =
(
  Methods_nms
    [| {| get_sequencer_releases, set_sequencer_releases |} |]
  ReleasesController(0)
) \MissionSequencerAppStateSync
/\ (end_sequencer_app.MidMissionSequencerId -> SKIP)


ReleasesController(releases ) =
(
	get_sequencer_releases.MidMissionSequencerId!releases ->
	ReleasesController(releases)
)
[]
(
	set_sequencer_releases.MidMissionSequencerId?newReleases ->
	ReleasesController(newReleases )
)

GetNextMission_nms =
  getNextMissionCall.MidMissionSequencerId ->
	get_sequencer_releases.MidMissionSequencerId?releases ->

	if releases == 0 then
  (
		set_sequencer_releases.MidMissionSequencerId!1 ->
		getNextMissionRet.MidMissionSequencerId!MidMissionAId ->
		SKIP
	)
  else if releases == 1 then
  (
    set_sequencer_releases.MidMissionSequencerId!2 ->
    getNextMissionRet.MidMissionSequencerId!MidMissionBId ->
    SKIP
  )
	else
	(
		getNextMissionRet.MidMissionSequencerId!nullMissionId ->
		SKIP
	)


Methods_nms =
(
	GetNextMission_nms
) ; Methods_nms




-- NESTED MISSION: MY MISSION 1


MidMissionAApp =
(
	--	Methods_nm
	--	/\
		(end_mission_app.MidMissionAId -> SKIP )
)

MidMissionBApp =
(
	--	Methods_nm
	--	/\
		(end_mission_app.MidMissionBId -> SKIP )
)


--NESTED MISSION SEQUENCER


BottomMissionSequencerAApp =
(
  Methods_nmsa
    [|MissionSequencerAppStateSync|]
    DoneController_nmsa(False)
) \MissionSequencerAppStateSync
/\ (end_sequencer_app.BottomMissionSequencerAId -> SKIP)


DoneController_nmsa(doneVar) =
(
	get_sequencer_done.BottomMissionSequencerAId!doneVar ->
	DoneController_nmsa(doneVar)
)
[]
(
	set_sequencer_done.BottomMissionSequencerAId?newDone ->
	DoneController_nmsa(newDone)
)

GetNextMission_nmsa =
  getNextMissionCall.BottomMissionSequencerAId ->
	get_sequencer_done.BottomMissionSequencerAId?doneVar ->
	if doneVar == False then
    (
		set_sequencer_done.BottomMissionSequencerAId!True ->
		getNextMissionRet.BottomMissionSequencerAId!BottomMissionAId ->
		SKIP
	)
	else
	(
		getNextMissionRet.BottomMissionSequencerAId!nullMissionId ->
		SKIP
	)


Methods_nmsa =
(
	GetNextMission_nmsa
) ; Methods_nmsa




-- NESTED MISSION:


BottomMissionAApp =
(
	(
	--	Methods_ma
	--	/\
		(end_mission_app.BottomMissionAId -> SKIP )
	)

)




-- MANAGEDTHRED2APP


ManagedThread2App =
(
	Methods_mt2
)
/\ (end_managedThread_app.ManagedThread2Id -> SKIP)

Methods_mt2 =
	Release_mt2

Release_mt2 =
	runCall.ManagedThread2Id ->
	runRet.ManagedThread2Id ->
	SKIP

  -- Tier 2 OSEH APP

  Tier2OSEHApp =
  (
  	Methods_t2oseh
  )
  /\ (end_oneshotEventHandler_app.Tier2OSEHId -> SKIP)

  Methods_t2oseh =
  	handlerAsyncEvent_t2oseh ; Methods_t2oseh

  handlerAsyncEvent_t2oseh =
  	handleAsyncEventCall.Tier2OSEHId ->
  	requestTerminationCall.BottomMissionAId.Tier2OSEHId ->
  	requestTerminationRet.BottomMissionAId.Tier2OSEHId?_ ->
    handleAsyncEventRet.Tier2OSEHId ->
    SKIP


-------------------------------

BottomMissionSequencerBApp =
(
  Methods_nmsb
    [|MissionSequencerAppStateSync|]
    DoneController_nmsb(False)
) \MissionSequencerAppStateSync
/\ (end_sequencer_app.BottomMissionSequencerBId -> SKIP)


DoneController_nmsb(doneVar) =
(
	get_sequencer_done.BottomMissionSequencerBId!doneVar ->
	DoneController_nmsb(doneVar)
)
[]
(
	set_sequencer_done.BottomMissionSequencerBId?newDone ->
	DoneController_nmsb(newDone)
)

GetNextMission_nmsb =
  getNextMissionCall.BottomMissionSequencerBId ->
	get_sequencer_done.BottomMissionSequencerBId?doneVar ->
	if doneVar == False then
    (
		set_sequencer_done.BottomMissionSequencerBId!True ->
		getNextMissionRet.BottomMissionSequencerBId!BottomMissionBId ->
		SKIP
	)
	else
	(
		getNextMissionRet.BottomMissionSequencerBId!nullMissionId ->
		SKIP
	)


Methods_nmsb =
(
	GetNextMission_nmsb
) ; Methods_nmsb



-- NESTED MISSION:


BotomMissionBApp =
(
--	Methods_mb
--	/\
	(end_mission_app.BottomMissionBId -> SKIP )
)



-- MANAGEDTHRED3APP


-- Tier 2 PEH APP

Tier2PEHApp =
(
	Methods_t2peh
)
/\ (end_periodicEventHandler_app.Tier2PEHId -> SKIP)

Methods_t2peh =
	handlerAsyncEvent_t2peh ; Methods_t2peh

handlerAsyncEvent_t2peh =
	handleAsyncEventCall.Tier2PEHId ->
	release.Tier2APEHId ->
  handleAsyncEventRet.Tier2PEHId ->
  SKIP



-- Tier 2 APEH APP

Tier2APEHApp =
(
	Methods_t2apeh
)
/\ (end_aperiodicEventHandler_app.Tier2APEHId -> SKIP)

Methods_t2apeh =
	handlerAsyncEvent_t2apeh ; Methods_t2apeh

handlerAsyncEvent_t2apeh =
	handleAsyncEventCall.Tier2APEHId ->
  requestTerminationCall.BottomMissionBId.Tier2APEHId ->
	requestTerminationRet.BottomMissionBId.Tier2APEHId?_ ->
  handleAsyncEventRet.Tier2APEHId ->
  SKIP

------------------------------------------------------------------------------
Tier0App =
(
	sbdia( MissionFW(TopMissionId) [| MissionAppSync |] TopMissionApp)
	 [|MissionSync|]
   (
      sbdia( SchedulableMissionSequencerFW(MidMissionSequencerId) [| MissionSequencerAppSync |] MidMissionSequencerApp )
      	[|{| activate_schedulables, done_safeletFW, done_toplevel_sequencer |}|]
      sbdia( ManagedThreadFW(ManagedThread1Id ) [| MTAppSync |] ManagedThread1App )
   )
)

Tier1App =
(
  (
	  sbdia( MissionFW(MidMissionAId) [| MissionAppSync |] MidMissionAApp)
		  [|MissionSync|]
    sbdia( SchedulableMissionSequencerFW(BottomMissionSequencerAId) [| MissionSequencerAppSync |] BottomMissionSequencerAApp )
  )
    [|{| done_safeletFW, done_toplevel_sequencer |}|]
  (
      sbdia( MissionFW(MidMissionBId) [| MissionAppSync |] MidMissionBApp)
        [|MissionSync|]
      sbdia( SchedulableMissionSequencerFW(BottomMissionSequencerBId) [| MissionSequencerAppSync |] BottomMissionSequencerBApp )
  )
)

Tier2App =
(
	(
		sbdia( MissionFW(BottomMissionAId) [| MissionAppSync |] BottomMissionAApp)
			[|MissionSync|]
    (
      sbdia( ManagedThreadFW(ManagedThread2Id) [| MTAppSync |] ManagedThread2App )
         [|{| activate_schedulables,done_safeletFW, done_toplevel_sequencer |}|]
       sbdia( OneShotEventHandlerFW(Tier2OSEHId, 1, 2, nullSchedulableId) [| OSEHAppSync |] Tier2OSEHApp )
    )
	)
	 [|{| done_safeletFW, done_toplevel_sequencer |}|]
	(
		sbdia( MissionFW(BottomMissionBId) [| MissionAppSync |] BotomMissionBApp)
		  [|MissionSync|]
    (
      sbdia( PeriodicEventHandlerFW(Tier2PEHId, 2, 1, 0, nullSchedulableId) [| PEHAppSync |] Tier2PEHApp )
        [|{|  release.Tier2APEHId, activate_schedulables,done_safeletFW, done_toplevel_sequencer |}|]
      sbdia( AperiodicEventHandlerFW(Tier2APEHId, aperiodic, 0, nullSchedulableId) [| APEHAppSync |] Tier2APEHApp )
    )
  )
)

Program2 =
(
  (
    (
      (
      sbdia  (
          sbdia(SafeletFW [| SafeltAppSync |] MyApp)
            [|SafeletTierSync|]
          sbdia(TopLevelMissionSequencers({TopLevelSequencerId}) [|MissionSequencerAppSync|] TopSequencerApp)
        )
          [|TierSync|]
        Tier0App
        )
          [|Tier0Sync|]
        Tier1App
    )
    [|Tier1Sync|]
  Tier2App
  )
    [| GSRSync |]
  GlobalSchedulableRegulator
)


assert Tier0App ; Loop :[ deadlock free [FD] ]

assert Tier1App ; Loop :[ deadlock free [FD] ]

assert Tier2App ; Loop :[ deadlock free [FD] ]

assert ((sbdia(SafeletFW [| SafeltAppSync |] MyApp)
    [|SafeletTierSync|]
  sbdia(TopLevelMissionSequencers({TopLevelSequencerId}) [|MissionSequencerAppSync|] TopSequencerApp)
)
  [|TierSync|]
Tier0App) ; Loop :[ deadlock free [FD] ]

assert Tier0App [|Tier0Sync|] Tier1App ; Loop :[ deadlock free [FD] ]

assert Tier1App [|Tier1Sync|] Tier2App ; Loop :[ deadlock free [FD] ]

assert GlobalSchedulableRegulator [| GSRSync |] ( Tier0App [|Tier0Sync|] Tier1App) ; Loop :[ deadlock free [FD] ]

assert GlobalSchedulableRegulator [| GSRSync |] ( Tier1App [|Tier1Sync|] Tier2App) ; Loop :[ deadlock free [FD] ]

assert Program2  :[ deadlock free [FD] ]

assert Program2 ; Loop :[ deadlock free [FD] ]


assert SKIP [F= Program2 \ Events
assert Program2 :[ divergence free ]
assert Program2 :[ deterministic  [FD] ]
