
--include "Framework.csp"

include "FrameworkProcess.csp"

include "AppChan.csp"

--****************************************************************************************************************************************************************************************************
--*******************************************************************************************APLICATION***********************************************************************************************
--****************************************************************************************************************************************************************************************************

-- SAFELET: MY APP


MyApp  =
	(
	 	Methods_s
	)
 /\	(end_safelet_app -> SKIP)

InitializeApplication_s =
     initializeApplicationCall ->
     initializeApplicationRet ->
     SKIP

GetSequencer_s =
	getSequencerCall ->
	getSequencerRet!TopLevelSequencerId ->
	SKIP

Methods_s =
 (
	GetSequencer_s
	[]
	InitializeApplication_s
 ); Methods_s


--TOP LEVEL SEQUENCER: MY SEQUENCER

channel get_sequencer_done : SchedulableID.Bool
channel set_sequencer_done : SchedulableID.Bool

nametype MissionSequencerAppStateSync = {| get_sequencer_done, set_sequencer_done |}

MainSequencerApp =
(
  Methods_tlms
    [|MissionSequencerAppStateSync|]
  DoneController_tlms(False)
)\ MissionSequencerAppStateSync
/\ (end_sequencer_app.TopLevelSequencerId -> SKIP)


DoneController_tlms(doneVar) =
(
	get_sequencer_done.TopLevelSequencerId!doneVar ->
	DoneController_tlms(doneVar)
)
[]
(
	set_sequencer_done.TopLevelSequencerId?newDone ->
	DoneController_tlms(newDone)
)


GetNextMission_tlms =
    getNextMissionCall.TopLevelSequencerId ->
	get_sequencer_done.TopLevelSequencerId?doneVar ->
	(
	  if doneVar == False then
	  (
		set_sequencer_done.TopLevelSequencerId!True ->
		getNextMissionRet.TopLevelSequencerId!MissionId  ->
		SKIP
      )
	  else
	  (
			getNextMissionRet.TopLevelSequencerId!nullMissionId ->
		    SKIP
	  )
    )

Methods_tlms =
 (
	GetNextMission_tlms
 ) ; Methods_tlms



--TOP LEVEL MISSION: TOP MISSION 1

MainMissionApp =
(
	(
		--(Methods_tlm1(MissionId) )
		--/\
		(end_mission_app.MissionId -> SKIP )
	)
)

APPInitializePhase(mission) =
--InitializePhase_tlm1 =
  initializeCall.MissionId   ->
  register!OneShotEventHandler1Id!MissionId  ->
  register!OneShotEventHandler2Id!MissionId  ->
   register!OneShotEventHandler3Id!MissionId  ->
  initializeRet.MissionId  ->
 --SKIP
 MissionPhase(mission, {OneShotEventHandler1Id, OneShotEventHandler2Id, OneShotEventHandler3Id})

APPCleanupMission(mission) =
--CleanupPhase_tlm1 =
 cleanupMissionCall.MissionId  ->
 cleanupMissionRet.MissionId?false ->
 SKIP

--Methods_tlm1(mission) =
--(
--	APPInitializePhase(mission)
--	[]
--	APPCleanupMission(mission)
--) ; Methods_tlm1(mission)


--OneShotEventHandler1App
OneShotEventHandler1App =
(
	Methods_oseh1
)
/\ (end_oneshotEventHandler_app.OneShotEventHandler1Id -> SKIP)

Methods_oseh1 =
	handlerAsyncEvent_oseh1 ; Methods_oseh1

handlerAsyncEvent_oseh1 =
	handleAsyncEventCall.OneShotEventHandler1Id ->

    handleAsyncEventRet.OneShotEventHandler1Id ->
    SKIP

--OneShotEventHandler2App
OneShotEventHandler2App =
(
	Methods_oseh2
)
/\ (end_oneshotEventHandler_app.OneShotEventHandler2Id -> SKIP)

Methods_oseh2 =
	handlerAsyncEvent_oseh2 ; Methods_oseh2

handlerAsyncEvent_oseh2 =
	handleAsyncEventCall.OneShotEventHandler2Id ->

    handleAsyncEventRet.OneShotEventHandler2Id ->
    SKIP


--OneShotEventHandler3App
OneShotEventHandler3App =
(
	Methods_oseh3
)
/\ (end_oneshotEventHandler_app.OneShotEventHandler3Id -> SKIP)

Methods_oseh3 =
	handlerAsyncEvent_oseh3 ; Methods_oseh3

handlerAsyncEvent_oseh3 =
	handleAsyncEventCall.OneShotEventHandler3Id ->
	requestTerminationCall.MissionId.OneShotEventHandler3Id ->
  requestTerminationRet.MissionId.OneShotEventHandler3Id?b ->
  handleAsyncEventRet.OneShotEventHandler3Id ->
  SKIP


nametype TopLevelMissionSequencerProgramSync = {|done_safeletFW, start_mission, done_mission, done_toplevel_sequencer|}

ThreeThreads =
(
	MyApp
	|||
	MainSequencerApp
	|||
	MainMissionApp
	|||
	OneShotEventHandler1App
	|||
	OneShotEventHandler2App
	|||
	OneShotEventHandler3App
)


Program(topLevelSequencerIDs, tier0) =
(
	ClustereAndTieredFramework(topLevelSequencerIDs, tier0)
		[| Union({SafeltAppSync, MissionSequencerAppSync, MissionAppSync, MTAppSync, OSEHAppSync , --APEHSync,
		 {|end_mission_app, setCeilingPriority, requestTerminationCall, requestTerminationRet, end_oneshotEventHandler_app, end_periodicEventHandler_app, end_aperiodicEventHandler_app, handleAsyncEventCall, handleAsyncEventRet|}})  |]
	ThreeThreads
)

TestProgram =
	Program(
				{TopLevelSequencerId},

				{ (MissionId , ({}, {}, {(OneShotEventHandler1Id, 1, 0, nullSchedulableId),
											(OneShotEventHandler2Id, 2, 0, nullSchedulableId),
												(OneShotEventHandler3Id, 3, 0, nullSchedulableId)},  {}, {})  )   }
)

Program2 =
(
  (
    (
      sbdia(SafeletFW [| SafeltAppSync |] MyApp)
        [|SafeletTierSync|]
      sbdia(TopLevelMissionSequencers({TopLevelSequencerId}) [|MissionSequencerAppSync|] MainSequencerApp)
    )
      [|TierSync|]
    (
      sbdia( MissionFW(MissionId) [| MissionAppSync |] MainMissionApp)
        [|MissionSync|]
      (
        (
          sbdia(OneShotEventHandlerFW(OneShotEventHandler1Id, 1, 0, nullSchedulableId) [| OSEHAppSync |] OneShotEventHandler1App )
            [|{|  activate_schedulables,done_safeletFW, done_toplevel_sequencer |}|]
          sbdia(OneShotEventHandlerFW(OneShotEventHandler2Id, 2, 0, nullSchedulableId) [| OSEHAppSync |] OneShotEventHandler2App )
        )
          [|{|  activate_schedulables,done_safeletFW, done_toplevel_sequencer |}|]
        sbdia(OneShotEventHandlerFW(OneShotEventHandler3Id, 3, 0, nullSchedulableId) [| OSEHAppSync |] OneShotEventHandler3App )
      )
    )
  )
    [| GSRSync |]
  GlobalSchedulableRegulator
)


--assert sbisim(diamond(TestProgram)) ; Loop :[ deadlock free [FD] ]
--assert sbisim(diamond(TestProgram)) :[ divergence free ]
--assert sbisim(diamond(TestProgram)) :[ deterministic  [FD] ]

assert Program2 ; Loop :[ deadlock free [FD] ]
