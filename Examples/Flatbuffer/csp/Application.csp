
--include "Framework.csp"

include "FrameworkProcess.csp"

include "AppChan.csp"

--**********************************************
--******************APLICATION******************
--**********************************************

-- SAFELET: MY APP



FlatBufferApp  =
(
 	Methods_s
)
 /\	(end_safelet_app -> SKIP)

InitializeApplication_s =
     initializeApplicationCall ->
     initializeApplicationRet ->
     SKIP

GetSequencer_s =
	getSequencerCall ->
	getSequencerRet!FlatBufferSequencerId ->
	SKIP

Methods_s =
 (
	GetSequencer_s
	[]
	InitializeApplication_s
 ); Methods_s


--TOP LEVEL SEQUENCER: MY SEQUENCER

channel get_sequencer_done : {FlatBufferSequencerId}.Bool
channel set_sequencer_done : {FlatBufferSequencerId}.Bool

nametype MissionSequencerAppStateSync = {| get_sequencer_done, set_sequencer_done |}



FlatBufferSequencerApp =


	(
		(
		  Methods_fbms
		    [|MissionSequencerAppStateSync|]
		  DoneController_fbms(False)
		)\ MissionSequencerAppStateSync
		/\ (end_sequencer_app.FlatBufferSequencerId -> SKIP)
	)



DoneController_fbms(doneVar) =
(
	get_sequencer_done.FlatBufferSequencerId!doneVar ->
	DoneController_fbms(doneVar)
)
[]
(
	set_sequencer_done.FlatBufferSequencerId?newDone ->
	DoneController_fbms(newDone)
)


GetNextMission_fbms =
    getNextMissionCall.FlatBufferSequencerId ->
	get_sequencer_done.FlatBufferSequencerId?doneVar ->
	(
	  if doneVar == False then
	  (
		set_sequencer_done.FlatBufferSequencerId!True ->
		getNextMissionRet.FlatBufferSequencerId!FlatBufferMissionId  ->
		SKIP
      )
	  else
	  (
		getNextMissionRet.FlatBufferSequencerId!nullMissionId ->
		SKIP
	  )
    )

Methods_fbms =
 (
	GetNextMission_fbms
 ) ; Methods_fbms



--FlatBUfferMission
channel writeCall  : {FlatBufferMissionId}.Bit.Threads
channel writeRet : {FlatBufferMissionId}.Threads
channel readCall : {FlatBufferMissionId}.Threads
channel readRet : {FlatBufferMissionId}.Bit.Threads
channel bufferEmptyCall : {FlatBufferMissionId}
channel bufferEmptyRet : {FlatBufferMissionId}.Bool

channel waitOnMissionCall : {FlatBufferMissionId}.Threads
channel waitOnMissionRet : {FlatBufferMissionId}.Threads
channel notifyOnMission : {FlatBufferMissionId}.Threads

channel get_bufferEmpty:{FlatBufferMissionId}.Bool
channel set_bufferContents:{FlatBufferMissionId}.Bit
channel get_bufferConetents:{FlatBufferMissionId}.Bit

nametype FlatBufferMissionStateSync = {|get_bufferEmpty,set_bufferContents, get_bufferConetents |}


FlatBufferMissionApp =
(
	(
		FlatBufferMissionState(0)
			[| FlatBufferMissionStateSync |]
		Methods_fbm
	)
	/\
	(end_mission_app.FlatBufferMissionId -> SKIP )
)\FlatBufferMissionStateSync


FlatBufferMissionState(bufferContents) =
(
	if bufferContents == 0 then
		get_bufferEmpty.FlatBufferMissionId!true ->
		FlatBufferMissionState(bufferContents)
	else
		get_bufferEmpty.FlatBufferMissionId!false ->
		FlatBufferMissionState(bufferContents)
)
[]
(
	set_bufferContents.FlatBufferMissionId?newBufferContents ->
	FlatBufferMissionState(newBufferContents)
)
[]
(
	get_bufferConetents.FlatBufferMissionId!bufferContents ->
	FlatBufferMissionState(bufferContents)
)

APPInitializePhase(mission) =
	initializeCall.FlatBufferMissionId   ->

--	register!ReaderId!FlatBufferMissionId  ->
	register!WriterId!FlatBufferMissionId  ->

	initializeRet.FlatBufferMissionId  ->
  MissionPhase(mission, { WriterId}) --ReaderId


APPCleanupMission(mission) =
 cleanupMissionCall.FlatBufferMissionId  ->
 cleanupMissionRet.FlatBufferMissionId?false ->
 SKIP

Methods_fbm =
(
	Write_fbm
	[]
	Read_fbm

) ; Methods_fbm



Write_fbm =
  writeCall.FlatBufferMissionId?value?thread ->
  (
    startSyncMeth.MissionObjectId.thread ->
    lockAcquired.MissionObjectId.thread ->
    Write_While(thread);
    set_bufferContents.FlatBufferMissionId!value ->
    notify.MissionObjectId.thread ->
    endSyncMeth.MissionObjectId.thread ->
    writeRet.FlatBufferMissionId.thread ->
  SKIP
  )

Write_While(thread) =
  get_bufferEmpty.FlatBufferMissionId?true ->
  SKIP
  []
  get_bufferEmpty.FlatBufferMissionId?false ->
  waitCall.MissionObjectId.thread ->
	waitRet.MissionObjectId.thread ->
  Write_While(thread)


Read_fbm =
	readCall.FlatBufferMissionId?thread ->

	startSyncMeth.MissionObjectId.thread ->
	lockAcquired.MissionObjectId.thread ->
  (
    Read_While(thread);

  	get_bufferConetents.FlatBufferMissionId?bufferConetents ->
    set_bufferContents.FlatBufferMissionId!0 ->
    notify.MissionObjectId.thread ->

    endSyncMeth.MissionObjectId.thread ->
  	readRet.FlatBufferMissionId!bufferConetents.thread ->
    SKIP
  )

Read_While(thread) =
  get_bufferEmpty.FlatBufferMissionId?true ->
  waitCall.MissionObjectId.thread ->
  waitRet.MissionObjectId.thread ->
  Read_While(thread)
  []
  get_bufferEmpty.FlatBufferMissionId?false ->
  SKIP

waitOnMissionMeth =
	waitOnMissionCall.FlatBufferMissionId?thread ->
	startSyncMeth.MissionObjectId.thread ->
	lockAcquired.MissionObjectId.thread ->

	waitCall.MissionObjectId.thread ->
	waitRet.MissionObjectId.thread ->

	endSyncMeth.MissionObjectId.thread ->
  waitOnMissionRet.FlatBufferMissionId?thread ->
	SKIP

notifyOnMissionMeth =
	notifyOnMission.FlatBufferMissionId?thread ->
	startSyncMeth.MissionObjectId?thread ->
	lockAcquired.MissionObjectId.thread ->

	notify.MissionObjectId.thread ->

	endSyncMeth.MissionObjectId.thread ->

	SKIP




-- Writer

WriterApp =
(
	Methods_w
)
/\ (end_managedThread_app.WriterId -> SKIP)

Methods_w =
	Run_w

Run_w =
	runCall.WriterId ->
	RunOuter_w ;
	runRet.WriterId ->
	SKIP

RunOuter_w =

	WhileOuter_w(0)


WhileOuter_w(i) =
(
  terminationPendingCall.FlatBufferMissionId ->

  ((
    terminationPendingRet.FlatBufferMissionId?true ->
    SKIP
  )
  []
  (
    terminationPendingRet.FlatBufferMissionId?false ->
    writeCall.FlatBufferMissionId!i!WriterThreadId ->
    writeRet.FlatBufferMissionId.WriterThreadId ->
    SKIP
  )
  );

  if i+1 == maxNum then
    requestTerminationCall.FlatBufferMissionId.WriterId ->
  --  requestTerminationRet.FlatBufferMissionId.WriterId?_ ->
    SKIP
  else
    WhileOuter_w(i+1)
)



-- Reader

ReaderApp =
(
	Methods_r
)
/\ (end_managedThread_app.ReaderId -> SKIP)

Methods_r =
	Run_r

Run_r =
	runCall.ReaderId ->
	RunOuter_r ;
	runRet.ReaderId ->

	SKIP

RunOuter_r =
	WhileOuter_r


WhileOuter_r =
(
  terminationPendingCall.FlatBufferMissionId ->

  ((
    terminationPendingRet.FlatBufferMissionId?true ->
    SKIP
  )
  []
  (
    terminationPendingRet.FlatBufferMissionId?false ->
    readCall.FlatBufferMissionId.ReaderThreadId ->
    readRet.FlatBufferMissionId?value!ReaderThreadId ->
  	WhileOuter_r
  )
  )
)




nametype TopLevelMissionSequencerProgramSync = {|done_safeletFW, start_mission, done_mission, done_toplevel_sequencer|}


Program2 =
(
(
 (
 	sbdia(SafeletFW [| SafeltAppSync |] FlatBufferApp)
  	[|SafeletTierSync|]
   sbdia(TopLevelMissionSequencers({FlatBufferSequencerId}) [|MissionSequencerAppSync|] FlatBufferSequencerApp)
 )
    [|TierSync|]
  (
    ( (
        (MissionFW(FlatBufferMissionId) [| MissionAppSync |]  FlatBufferMissionApp)
          [| union( ThreadObjectSync , {| end_mission_app |}) |]
        (ThreadObjectSystem(MissionObjectId) /\ (end_mission_app.FlatBufferMissionId -> SKIP) )
    	) )
       [| union(MissionSync, FlatBufferMissionAppSync) |]
    (
        sbdia( ManagedThreadFW(WriterId) [| MTAppSync |] WriterApp )
      --    [|{| activate_schedulables,done_safeletFW, done_toplevel_sequencer |}|]
    --    sbdia( ManagedThreadFW(ReaderId) [| MTAppSync |] ReaderApp )
    )
  )
)
    [| GSRSync |]
GlobalSchedulableRegulator
)


assert MissionFW(FlatBufferMissionId) [| MissionAppSync |]  FlatBufferMissionApp ; Loop :[deadlock free [FD]]

assert (
    (MissionFW(FlatBufferMissionId) [| MissionAppSync |]  FlatBufferMissionApp)
      [| union( ThreadObjectSync , {| end_mission_app |}) |]
    (ThreadObjectSystem(MissionObjectId) /\ (end_mission_app.FlatBufferMissionId -> SKIP) )
  ); Loop :[deadlock free [FD]]


assert (
  ( (
      (MissionFW(FlatBufferMissionId) [| MissionAppSync |]  FlatBufferMissionApp)
        [| union( ThreadObjectSync , {| end_mission_app |}) |]
      (ThreadObjectSystem(MissionObjectId) /\ (end_mission_app.FlatBufferMissionId -> SKIP) )
    ) )
     [| union(MissionSync, FlatBufferMissionAppSync) |]
  (
      sbdia( ManagedThreadFW(WriterId) [| MTAppSync |] WriterApp )
        [|{| activate_schedulables,done_safeletFW, done_toplevel_sequencer |}|]
      sbdia( ManagedThreadFW(ReaderId) [| MTAppSync |] ReaderApp )
  )
) ; Loop :[deadlock free [FD]]

assert Program2 ; Loop :[deadlock free [FD]]
assert Program2 :[divergence free]
assert Program2 :[deterministic [FD]]


--assert STOP [T= (Program2 \ diff(Events, {|throw|}))
