
--include "Framework.csp"

include "FrameworkProcess.csp"

include "AppChan.csp"

--****************************************************************************
--*************************APLICATION*****************************************
--****************************************************************************

-- SAFELET: MY APP


MyApp  =
	(
	 	Methods_s
	)
 /\	(end_safelet_app -> SKIP)

InitializeApplication_s =
     initializeApplicationCall ->
     initializeApplicationRet ->
     SKIP

GetSequencer_s =
	getSequencerCall ->
	getSequencerRet!TopLevelSequencerId ->
	SKIP

Methods_s =
 (
	GetSequencer_s
	[]
	InitializeApplication_s
 ); Methods_s


--TOP LEVEL SEQUENCER:

channel get_sequencer_returnedA : SchedulableID.Bool
channel set_sequencer_returnedA : SchedulableID.Bool

channel get_sequencer_returnedB : SchedulableID.Bool
channel set_sequencer_returnedB : SchedulableID.Bool

nametype Tier0MissionSequencerSync =
	{|get_sequencer_returnedA, set_sequencer_returnedA,
	  get_sequencer_returnedB,set_sequencer_returnedB |}





MainSequencerApp =
(
  Methods_tlms
    [|Tier0MissionSequencerSync|]
  ReturnController_tlms(False, False)
) \Tier0MissionSequencerSync
/\ (end_sequencer_app.TopLevelSequencerId -> SKIP)


ReturnController_tlms(returnedA,returnedB ) =
(
	get_sequencer_returnedA.TopLevelSequencerId!returnedA ->
	ReturnController_tlms(returnedA,returnedB )
)
[]
(
	set_sequencer_returnedA.TopLevelSequencerId?newReturnedA ->
	ReturnController_tlms(newReturnedA,returnedB )
)
[]
(
	get_sequencer_returnedB.TopLevelSequencerId!returnedB ->
	ReturnController_tlms(returnedA,returnedB )
)
[]
(
	set_sequencer_returnedB.TopLevelSequencerId?newReturnedB ->
	ReturnController_tlms(returnedA,newReturnedB )
)

GetNextMission_tlms =
    getNextMissionCall.TopLevelSequencerId ->
	get_sequencer_returnedA.TopLevelSequencerId?returnedA ->
	if returnedA == False then
    (
		set_sequencer_returnedA.TopLevelSequencerId!True ->
		getNextMissionRet.TopLevelSequencerId!MissionAId ->
		SKIP
	)
    else
    (
    	get_sequencer_returnedB.TopLevelSequencerId?returnedB ->
	    if returnedB == False then
	    (
			set_sequencer_returnedB.TopLevelSequencerId!True ->
			getNextMissionRet.TopLevelSequencerId!MissionBId ->
			SKIP
		)
	    else
		(
			getNextMissionRet.TopLevelSequencerId!nullMissionId ->
			SKIP
		)
    )

Methods_tlms =
(
	GetNextMission_tlms
) ; Methods_tlms







--  Mission A


MissionAApp =
(
	(
	--	Methods_ma
	--	/\
		(end_mission_app.MissionAId -> SKIP )
	)
)

--  Mission B


MissionBApp =
(
	(
		--Methods_mb
	--	/\
		(end_mission_app.MissionBId -> SKIP )
	)
)


APPInitializePhase(m) =
--InitializePhase_ma =
  initializeCall.m  ->
  register!ManagedThread1Id!m ->
  register!ManagedThread2Id!m ->
  initializeRet.m ->
  --SKIP
MissionPhase(m, {ManagedThread1Id, ManagedThread2Id })

APPCleanupMission(m) =
--CleanupPhase_ma =
 cleanupMissionCall.m ->
 cleanupMissionRet.m!True ->
	SKIP

--Methods_ma =
--(
--	InitializePhase_ma
--	[]
--	CleanupPhase_ma
--) ; Methods_ma






--Methods_mb =
--(
--	InitializePhase_mb
--	[]
--	CleanupPhase_mb
--) ; Methods_mb



--ManagedThread1App

ManagedThread1App =
(
	Methods_mt1
)
/\ (end_managedThread_app.ManagedThread1Id -> SKIP)

Methods_mt1 =
	Run_mt1 ; Methods_mt1

Run_mt1 =
	runCall.ManagedThread1Id ->

	runRet.ManagedThread1Id ->
	SKIP


--ManagedThread2App

ManagedThread2App =
(
	Methods_mt2
)
/\ (end_managedThread_app.ManagedThread2Id -> SKIP)

Methods_mt2 =
	Run_mt2 ; Methods_mt2

Run_mt2 =
	runCall.ManagedThread2Id ->

	runRet.ManagedThread2Id ->
	SKIP




nametype TopLevelMissionSequencerProgramSync = {|done_safeletFW, start_mission, done_mission, done_toplevel_sequencer|}

MultipleNestedMissions =
(
	MyApp
	|||
	MainSequencerApp
	|||
	MissionAApp
	|||
	MissionBApp
	|||
	ManagedThread1App
	|||
	ManagedThread2App
)


Program2 =
(
  (
    (
      sbdia(SafeletFW [| SafeltAppSync |] MyApp)
        [|SafeletTierSync|]
      sbdia(TopLevelMissionSequencers({TopLevelSequencerId}) [|MissionSequencerAppSync|] MainSequencerApp)
    )
      [|TierSync|]
    (
      (
        sbdia( MissionFW(MissionAId) [| MissionAppSync |] MissionAApp)
          [|MissionSync|]
        (
          sbdia( ManagedThreadFW(ManagedThread1Id) [| MTAppSync |] ManagedThread1App )
            [|{| activate_schedulables,done_safeletFW, done_toplevel_sequencer |}|]
          sbdia( ManagedThreadFW(ManagedThread2Id) [| MTAppSync |] ManagedThread2App )
        )
      )
        [|{| done_safeletFW, done_toplevel_sequencer |}|]
      (
        sbdia( MissionFW(MissionBId) [| MissionAppSync |] MissionBApp)
          [|MissionSync|]
        (
          sbdia( ManagedThreadFW(ManagedThread1Id) [| MTAppSync |] ManagedThread1App )
            [|{|  activate_schedulables, done_safeletFW, done_toplevel_sequencer |}|]
          sbdia( ManagedThreadFW(ManagedThread2Id) [| MTAppSync |] ManagedThread2App )
        )
      )
    )
  )
    [| GSRSync |]
  GlobalSchedulableRegulator
)


assert Program2 ; Loop :[ deadlock free [FD] ]
